#include <iostream>
#include <algorithm>
#include <vector>
#include <utility>

auto compareByX = [](const std::pair<int, int>& a, const std::pair<int, int>& b) {
    return a.first < b.first;
};

int det(std::pair<int,int> a,std::pair<int,int> b, std::pair<int,int> c){
    int result = (b.first-a.first)*(c.second-a.second) - (c.first-a.first)*(b.second-a.second);
    return result;
}

int crosses(std::pair<int,int> point,std::pair<int,int> q,std::pair<int,int> pi,std::pair<int,int> pi1,std::pair<int,int> pi2,std::pair<int,int> pi_1){

    ////////////////////////////////for D=det(a,b,c) if D>0 c is on the left hand-side of vec(a,b)////////////////////////////////////////////
    ////////////////////////////////for D=det(a,b,c) if D<0 c is on the right hand-side of vec(a,b)///////////////////////////////////////////
    ////////////////////////////////for D=det(a,b,c) if D==0 c is on the same line as vec(a,b)////////////////////////////////////////////////

    int d1 = det(point,q,pi);
    int d2 = det(point,q,pi1);
    int d3 = det(pi,pi1,point);
    int d4 = det(pi,pi1,q);
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    if(d1*d2< 0 && d3*d4 < 0){//by definition p-q and pi-pi1 cross
        return 1;
    }

    else if(d3==0){// check if THE point is in the edge
        if(std::min(pi.first, pi1.first) <= point.first && point.first<=std::max(pi.first, pi1.first) && std::min(pi.second, pi1.second) <= point.second && point.second<=std::max(pi.second, pi1.second)  )
        {
            return 2;//2 is returned because in the rayCasting func we are checking whether we returned 2 which means that point is inside the polygon
        }else{
            int d5 = det(point,q,pi2);
            int d6 = det(point,q,pi_1);
            if(d5*d6<0)return 1;
            if(d5*d6>0)return 0;

        }
    }
    else if(d1==0 && pi.first>=point.first && pi.first<=q.first ){//d1==0 means that point-q and pi are on the same line, BUT we have to ensure that its inside RAY not the line
        int d7 = det(point,pi,pi1);
        int d8 = det(point,pi,pi_1);

        if(d7*d8<0)return 1;
        if(d7*d8>0)return 0;

    }
    else return 0;

}


bool rayCasting(std::vector<std::pair<int,int>> pointVec,std::pair<int,int> point){

    ////////////////Creating ray pq where q=(maxX+1,y), by finding max value of x int polygon/////////////////////////////////////////////
    ////////////////Simultaneously we are checking whether we can easily see that point is out of maximal bounds of polygon///////////////
    ////////////////If point is inside the maximal bounds of polygon that does not mean its inside the polygon////////////////////////////
    std::pair<int,int> tempPair1 = *std::min_element( pointVec.begin(),pointVec.end(), compareByX);
    std::pair<int,int> tempPair2 = *std::max_element( pointVec.begin(),pointVec.end(), compareByX);

    int minX = tempPair1.first;
    int maxX = tempPair2.first;

    if(point.first > maxX || point.first < minX ){//point is not in the polygon
        return false;
    }
    std::pair<int,int> q;//create "ray" that is represented by a line segment as maxX+1 is a value of x outside of the polygon
    q.first = maxX+1;
    q.second = point.second;
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /////////////////////////////////////iterate through each side//////////////////////////////////////////////////////////////////////////
    int crossCounter = 0;
    int auxCrosses;
    int vecLen = pointVec.size();

    auxCrosses = crosses( point, q, pointVec[0], pointVec[1], pointVec[2],pointVec[vecLen-1]);
    if(auxCrosses==2)return true;
    crossCounter += auxCrosses;
    for(int i=1;i<vecLen;++i){//for each side of the polygon, check if q crosses and add to crossCounter how many times it crosses
        auxCrosses = crosses( point, q, pointVec[i], pointVec[ (i+1)%vecLen ], pointVec[ (i+2)%vecLen ],pointVec[i-1] );
        if(auxCrosses==2)return true;
        crossCounter += auxCrosses;
    }

    //crossCounter+=crosses(point,q,pointVec[pointVec.size()-1],pointVec[0],pointVec[1],pointVec[pointVec.size()-2]);
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    //////////////////////odd number of crosses means that its inside otherwise its outside///////////////////////////////////////////////////
    if(crossCounter%2==1){
        return true;
    }
    else{
        return false;
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}



int main(){
    std::vector<std::pair<int,int>> pointVec;
    std::pair<int,int> point;

    ////////////////////FALSE///////////////////////////////////
    pointVec.push_back({1,1});
    pointVec.push_back({10,1});
    pointVec.push_back({1,10});
    pointVec.push_back({10,10});

    point.first=0;
    point.second=1;

    std::cout<<rayCasting(pointVec,point)<<std::endl;
    pointVec.clear();
    ////////////////////////////////////////////////////////////////


    ////////////////////TRUE///////////////////////////////////
    pointVec.push_back({1,1});
    pointVec.push_back({10,1});
    pointVec.push_back({1,10});
    pointVec.push_back({10,10});

    point.first=5;
    point.second=5;

    std::cout<<rayCasting(pointVec,point)<<std::endl;
    pointVec.clear();
    ////////////////////////////////////////////////////////////////


    /////////////////////////TRUE///////////////////////////////////
    pointVec.push_back({1,1});
    pointVec.push_back({4,-5});
    pointVec.push_back({10,1});
    pointVec.push_back({1,10});
    pointVec.push_back({10,10});

    point.first=4;
    point.second=-3;

    std::cout<<rayCasting(pointVec,point)<<std::endl;
    pointVec.clear();
    ////////////////////////////////////////////////////////////////


    /////////////////////////TRUE///////////////////////////////////
    pointVec.push_back({1,1});
    pointVec.push_back({4,-5});
    pointVec.push_back({4,-10});
    pointVec.push_back({10,1});
    pointVec.push_back({1,10});
    pointVec.push_back({10,10});

    point.first=5;
    point.second=-3;

    std::cout<<rayCasting(pointVec,point)<<std::endl;
    pointVec.clear();
    ////////////////////////////////////////////////////////////////


    /////////////////////////FALSE///////////////////////////////////
    pointVec.push_back({1,1});
    pointVec.push_back({4,-5});
    pointVec.push_back({4,-10});
    pointVec.push_back({10,1});
    pointVec.push_back({1,10});
    pointVec.push_back({10,10});

    point.first=-500;
    point.second=-300;

    std::cout<<rayCasting(pointVec,point)<<std::endl;
    pointVec.clear();
    ////////////////////////////////////////////////////////////////


    /////////////////////////FALSE///////////////////////////////////
    pointVec.push_back({1,1});
    pointVec.push_back({4,-5});
    pointVec.push_back({4,-10});
    pointVec.push_back({10,1});
    pointVec.push_back({1,10});
    pointVec.push_back({10,10});

    point.first=500;
    point.second=-300;

    std::cout<<rayCasting(pointVec,point)<<std::endl;
    pointVec.clear();
    ////////////////////////////////////////////////////////////////


    /////////////////////////FALSE///////////////////////////////////
    pointVec.push_back({1,1});
    pointVec.push_back({4,-5});
    pointVec.push_back({4,-10});
    pointVec.push_back({10,1});
    pointVec.push_back({1,10});
    pointVec.push_back({10,10});

    point.first=500;
    point.second=300;

    std::cout<<rayCasting(pointVec,point)<<std::endl;
    pointVec.clear();
    ////////////////////////////////////////////////////////////////


    /////////////////////////FALSE///////////////////////////////////
    pointVec.push_back({1,1});
    pointVec.push_back({4,-5});
    pointVec.push_back({4,-10});
    pointVec.push_back({10,1});
    pointVec.push_back({1,10});
    pointVec.push_back({10,10});

    point.first=-500;
    point.second=300;

    std::cout<<rayCasting(pointVec,point)<<std::endl;
    pointVec.clear();
    ////////////////////////////////////////////////////////////////


    /////////////////////////TRUE///////////////////////////////////
    pointVec.push_back({1,1});
    pointVec.push_back({1,10});
    pointVec.push_back({10,10});

    point.first=2;
    point.second=8;

    std::cout<<rayCasting(pointVec,point)<<std::endl;
    pointVec.clear();
    ////////////////////////////////////////////////////////////////


    /////////////////////////FALSE///////////////////////////////////
    pointVec.push_back({1,1});
    pointVec.push_back({1,10});
    pointVec.push_back({10,10});

    point.first=10;
    point.second=1;

    std::cout<<rayCasting(pointVec,point)<<std::endl;
    pointVec.clear();
    ////////////////////////////////////////////////////////////////


    /////////////////////////TRUE///////////////////////////////////
    pointVec.push_back({10,10});
    pointVec.push_back({1,1});
    pointVec.push_back({10,1});
    pointVec.push_back({4,-10});
    pointVec.push_back({1,10});
    pointVec.push_back({4,-5});

    point.first=5;
    point.second=-3;

    std::cout<<rayCasting(pointVec,point)<<std::endl;
    pointVec.clear();
    ////////////////////////////////////////////////////////////////


    /////////////////////////TRUE///////////////////////////////////
    pointVec.push_back({0,0});
    pointVec.push_back({10,0});
    pointVec.push_back({10,10});
    pointVec.push_back({0,10});

    point.first = 5;
    point.second = 5;

    std::cout << rayCasting(pointVec, point) << std::endl;
    pointVec.clear();
    ////////////////////////////////////////////////////////////////


    /////////////////////////FALSE///////////////////////////////////
    pointVec.push_back({0,0});
    pointVec.push_back({10,0});
    pointVec.push_back({10,10});
    pointVec.push_back({0,10});

    point.first = -1;
    point.second = -1;

    std::cout << rayCasting(pointVec, point) << std::endl;
    pointVec.clear();

    ////////////////////////////////////////////////////////////////


    /////////////////////////TRUE///////////////////////////////////
    pointVec.push_back({0,0});
    pointVec.push_back({10,0});
    pointVec.push_back({5,10});

    point.first = 5;
    point.second = 5;

    std::cout << rayCasting(pointVec, point) << std::endl;
    pointVec.clear();

    ////////////////////////////////////////////////////////////////


    /////////////////////////FALSE///////////////////////////////////
    pointVec.push_back({0,0});
    pointVec.push_back({10,0});
    pointVec.push_back({5,10});

    point.first = 11;
    point.second = 5;

    std::cout << rayCasting(pointVec, point) << std::endl;
    pointVec.clear();
    ////////////////////////////////////////////////////////////////


    /////////////////////////TRUE///////////////////////////////////
    pointVec.push_back({0,0});
    pointVec.push_back({5,2});
    pointVec.push_back({10,0});
    pointVec.push_back({6,5});
    pointVec.push_back({10,10});
    pointVec.push_back({5,8});
    pointVec.push_back({0,10});
    pointVec.push_back({4,5});

    point.first = 5;
    point.second = 5;

    std::cout << rayCasting(pointVec, point) << std::endl;
    pointVec.clear();
    ////////////////////////////////////////////////////////////////


    /////////////////////////FALSE///////////////////////////////////
    pointVec.push_back({0,0});
    pointVec.push_back({10,0});
    pointVec.push_back({10,10});
    pointVec.push_back({0,10});

    point.first = 1000;
    point.second = 1000;

    std::cout << rayCasting(pointVec, point) << std::endl;
    pointVec.clear();
    ////////////////////////////////////////////////////////////////


    /////////////////////////TRUE///////////////////////////////////
    pointVec.push_back({1,1});
    pointVec.push_back({3,0});
    pointVec.push_back({6,2});
    pointVec.push_back({5,5});
    pointVec.push_back({2,6});

    point.first = 3;
    point.second = 3;

    std::cout << rayCasting(pointVec, point) << std::endl;
    pointVec.clear();
    ////////////////////////////////////////////////////////////////


    /////////////////////////FALSE///////////////////////////////////
    pointVec.push_back({1,1});
    pointVec.push_back({3,0});
    pointVec.push_back({6,2});
    pointVec.push_back({5,5});
    pointVec.push_back({2,6});

    point.first = 6;
    point.second = 3;

    std::cout << rayCasting(pointVec, point) << std::endl;
    pointVec.clear();
    ////////////////////////////////////////////////////////////////

    /////////////////////////TRUE///////////////////////////////////
    pointVec.push_back({1,1});
    pointVec.push_back({5,1});
    pointVec.push_back({5,5});
    pointVec.push_back({1,5});

    point.first = 5;
    point.second = 3;

    std::cout << rayCasting(pointVec, point) << std::endl;
    pointVec.clear();
    ////////////////////////////////////////////////////////////////


    /////////////////////////FALSE///////////////////////////////////
    pointVec.push_back({1,1});
    pointVec.push_back({5,1});
    pointVec.push_back({6,3});
    pointVec.push_back({5,5});

    point.first = 1;
    point.second = 3;

    std::cout << rayCasting(pointVec, point) << std::endl;
    pointVec.clear();
    ////////////////////////////////////////////////////////////////

    /////////////////////////FALSE///////////////////////////////////
    pointVec.push_back({1,1});
    pointVec.push_back({5,1});
    pointVec.push_back({6,3});
    pointVec.push_back({5,5});

    point.first = 2;
    point.second = 3;

    std::cout << rayCasting(pointVec, point) << std::endl;
    pointVec.clear();
    ////////////////////////////////////////////////////////////////


    /////////////////////////TRUE///////////////////////////////////
    pointVec.push_back({1,1});
    pointVec.push_back({5,1});
    pointVec.push_back({6,3});
    pointVec.push_back({5,5});

    point.first = 3;
    point.second = 3;

    std::cout << rayCasting(pointVec, point) << std::endl;
    pointVec.clear();
    ////////////////////////////////////////////////////////////////

    /////////////////////////FALSE///////////////////////////////////
    pointVec.push_back({3,1});
    pointVec.push_back({5,3});
    pointVec.push_back({3,5});
    pointVec.push_back({2,3});

    point.first = 1;
    point.second = 5;

    std::cout << rayCasting(pointVec, point) << std::endl;
    pointVec.clear();
    ////////////////////////////////////////////////////////////////

    /////////////////////////TRUE///////////////////////////////////
    pointVec.push_back({3,1});
    pointVec.push_back({5,3});
    pointVec.push_back({3,5});
    pointVec.push_back({2,3});

    point.first = 3;
    point.second = 3;

    std::cout << rayCasting(pointVec, point) << std::endl;
    pointVec.clear();
    ////////////////////////////////////////////////////////////////

    return 0;
}
